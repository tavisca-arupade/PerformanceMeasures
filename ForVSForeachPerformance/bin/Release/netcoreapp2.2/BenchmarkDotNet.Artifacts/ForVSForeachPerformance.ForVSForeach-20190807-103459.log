// Validating benchmarks:
// ***** BenchmarkRunner: Start   *****
// ***** Found 2 benchmark(s) in total *****
// ***** Building 1 exe(s) in Parallel: Start   *****
// start dotnet restore  /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in C:\Users\arupade\source\repos\PerformanceAssignment\ForVSForeachPerformance\bin\Release\netcoreapp2.2\a7e654da-43d3-48f7-88bb-7deb65b11bd5
// command took 2.83s and exited with 0
// start dotnet build -c Release  --no-restore /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in C:\Users\arupade\source\repos\PerformanceAssignment\ForVSForeachPerformance\bin\Release\netcoreapp2.2\a7e654da-43d3-48f7-88bb-7deb65b11bd5
// command took 4.36s and exited with 0
// ***** Done, took 00:00:07 (7.5 sec)   *****
// Found 2 benchmarks:
//   ForVSForeach.TestForLoop: DefaultJob
//   ForVSForeach.TestForeachLoop: DefaultJob

Setup power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)// **************************
// Benchmark: ForVSForeach.TestForLoop: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "a7e654da-43d3-48f7-88bb-7deb65b11bd5.dll" --benchmarkName "ForVSForeachPerformance.ForVSForeach.TestForLoop" --job "Default" --benchmarkId 0 in C:\Users\arupade\source\repos\PerformanceAssignment\ForVSForeachPerformance\bin\Release\netcoreapp2.2\a7e654da-43d3-48f7-88bb-7deb65b11bd5\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.6 (CoreCLR 4.6.27817.03, CoreFX 4.6.27818.02), 64bit RyuJIT
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 346074.64 ns, 346.0746 us/op
WorkloadJitting  1: 1 op, 890896.05 ns, 890.8960 us/op

OverheadJitting  2: 16 op, 272775.38 ns, 17.0485 us/op
WorkloadJitting  2: 16 op, 531693.18 ns, 33.2308 us/op

WorkloadPilot    1: 16 op, 217345.09 ns, 13.5841 us/op
WorkloadPilot    2: 32 op, 184159.85 ns, 5.7550 us/op
WorkloadPilot    3: 64 op, 493037.85 ns, 7.7037 us/op
WorkloadPilot    4: 128 op, 876309.13 ns, 6.8462 us/op
WorkloadPilot    5: 256 op, 1705940.12 ns, 6.6638 us/op
WorkloadPilot    6: 512 op, 4525591.47 ns, 8.8390 us/op
WorkloadPilot    7: 1024 op, 7959352.09 ns, 7.7728 us/op
WorkloadPilot    8: 2048 op, 13551976.66 ns, 6.6172 us/op
WorkloadPilot    9: 4096 op, 26959542.82 ns, 6.5819 us/op
WorkloadPilot   10: 8192 op, 52196735.23 ns, 6.3717 us/op
WorkloadPilot   11: 16384 op, 109344635.28 ns, 6.6739 us/op
WorkloadPilot   12: 32768 op, 206844692.71 ns, 6.3124 us/op
WorkloadPilot   13: 65536 op, 409089765.34 ns, 6.2422 us/op
WorkloadPilot   14: 131072 op, 834594190.10 ns, 6.3674 us/op

OverheadWarmup   1: 131072 op, 252718.36 ns, 1.9281 ns/op
OverheadWarmup   2: 131072 op, 250895.00 ns, 1.9142 ns/op
OverheadWarmup   3: 131072 op, 595146.28 ns, 4.5406 ns/op
OverheadWarmup   4: 131072 op, 261470.51 ns, 1.9949 ns/op
OverheadWarmup   5: 131072 op, 247248.27 ns, 1.8864 ns/op
OverheadWarmup   6: 131072 op, 355191.47 ns, 2.7099 ns/op
OverheadWarmup   7: 131072 op, 390200.07 ns, 2.9770 ns/op
OverheadWarmup   8: 131072 op, 265117.24 ns, 2.0227 ns/op

OverheadActual   1: 131072 op, 246883.60 ns, 1.8836 ns/op
OverheadActual   2: 131072 op, 247612.94 ns, 1.8891 ns/op
OverheadActual   3: 131072 op, 246883.60 ns, 1.8836 ns/op
OverheadActual   4: 131072 op, 246883.60 ns, 1.8836 ns/op
OverheadActual   5: 131072 op, 347898.01 ns, 2.6543 ns/op
OverheadActual   6: 131072 op, 497049.25 ns, 3.7922 ns/op
OverheadActual   7: 131072 op, 473710.18 ns, 3.6141 ns/op
OverheadActual   8: 131072 op, 354097.45 ns, 2.7015 ns/op
OverheadActual   9: 131072 op, 279339.49 ns, 2.1312 ns/op
OverheadActual  10: 131072 op, 281162.85 ns, 2.1451 ns/op
OverheadActual  11: 131072 op, 324923.61 ns, 2.4790 ns/op
OverheadActual  12: 131072 op, 385823.99 ns, 2.9436 ns/op
OverheadActual  13: 131072 op, 395305.49 ns, 3.0159 ns/op
OverheadActual  14: 131072 op, 261835.19 ns, 1.9976 ns/op
OverheadActual  15: 131072 op, 672821.62 ns, 5.1332 ns/op
OverheadActual  16: 131072 op, 269128.65 ns, 2.0533 ns/op
OverheadActual  17: 131072 op, 246883.60 ns, 1.8836 ns/op
OverheadActual  18: 131072 op, 247248.27 ns, 1.8864 ns/op
OverheadActual  19: 131072 op, 345709.97 ns, 2.6376 ns/op
OverheadActual  20: 131072 op, 355191.47 ns, 2.7099 ns/op

WorkloadWarmup   1: 131072 op, 1133382053.64 ns, 8.6470 us/op
WorkloadWarmup   2: 131072 op, 522968014.90 ns, 3.9899 us/op
WorkloadWarmup   3: 131072 op, 1748621809.70 ns, 13.3409 us/op
WorkloadWarmup   4: 131072 op, 545493863.83 ns, 4.1618 us/op
WorkloadWarmup   5: 131072 op, 517158045.25 ns, 3.9456 us/op
WorkloadWarmup   6: 131072 op, 537279605.34 ns, 4.0991 us/op
WorkloadWarmup   7: 131072 op, 2949495711.99 ns, 22.5029 us/op
WorkloadWarmup   8: 131072 op, 622517534.39 ns, 4.7494 us/op

// BeforeActualRun
WorkloadActual   1: 131072 op, 551349782.27 ns, 4.2065 us/op
WorkloadActual   2: 131072 op, 522406783.21 ns, 3.9856 us/op
WorkloadActual   3: 131072 op, 526893719.35 ns, 4.0199 us/op
WorkloadActual   4: 131072 op, 531623527.68 ns, 4.0560 us/op
WorkloadActual   5: 131072 op, 519068931.58 ns, 3.9602 us/op
WorkloadActual   6: 131072 op, 532227790.78 ns, 4.0606 us/op

OutOfMemoryException!
BenchmarkDotNet continues to run additional iterations until desired accuracy level is achieved. It's possible only if the benchmark method doesn't have any side-effects.
If your benchmark allocates memory and keeps it alive, you are creating a memory leak.
You should redesign your benchmark and remove the side-effects. You can use `OperationsPerInvoke`, `IterationSetup` and `IterationCleanup` to do that.

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at System.Collections.Generic.List`1.set_Capacity(Int32 value)
   at System.Collections.Generic.List`1.AddWithResize(T item)
   at ForVSForeachPerformance.ForVSForeach.TestForLoop() in C:\Users\arupade\source\repos\PerformanceAssignment\ForVSForeachPerformance\Program.cs:line 35
   at BenchmarkDotNet.Autogenerated.Runnable_0.WorkloadActionUnroll(Int64 invokeCount) in C:\Users\arupade\source\repos\PerformanceAssignment\ForVSForeachPerformance\bin\Release\netcoreapp2.2\a7e654da-43d3-48f7-88bb-7deb65b11bd5\a7e654da-43d3-48f7-88bb-7deb65b11bd5.notcs:line 728
   at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data)
   at BenchmarkDotNet.Engines.EngineStage.RunIteration(IterationMode mode, IterationStage stage, Int32 index, Int64 invokeCount, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineActualStage.RunAuto(Int64 invokeCount, IterationMode iterationMode, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineActualStage.Run(Int64 invokeCount, IterationMode iterationMode, Boolean runAuto, Int32 unrollFactor, Boolean forceSpecific)
   at BenchmarkDotNet.Engines.Engine.Run()
   at BenchmarkDotNet.Autogenerated.Runnable_0.Run(IHost host, String benchmarkName) in C:\Users\arupade\source\repos\PerformanceAssignment\ForVSForeachPerformance\bin\Release\netcoreapp2.2\a7e654da-43d3-48f7-88bb-7deb65b11bd5\a7e654da-43d3-48f7-88bb-7deb65b11bd5.notcs:line 168
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in C:\Users\arupade\source\repos\PerformanceAssignment\ForVSForeachPerformance\bin\Release\netcoreapp2.2\a7e654da-43d3-48f7-88bb-7deb65b11bd5\a7e654da-43d3-48f7-88bb-7deb65b11bd5.notcs:line 49
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// **************************
// Benchmark: ForVSForeach.TestForeachLoop: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "a7e654da-43d3-48f7-88bb-7deb65b11bd5.dll" --benchmarkName "ForVSForeachPerformance.ForVSForeach.TestForeachLoop" --job "Default" --benchmarkId 1 in C:\Users\arupade\source\repos\PerformanceAssignment\ForVSForeachPerformance\bin\Release\netcoreapp2.2\a7e654da-43d3-48f7-88bb-7deb65b11bd5\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.6 (CoreCLR 4.6.27817.03, CoreFX 4.6.27818.02), 64bit RyuJIT
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 450735.78 ns, 450.7358 us/op
WorkloadJitting  1: 1 op, 920799.23 ns, 920.7992 us/op

OverheadJitting  2: 16 op, 468604.76 ns, 29.2878 us/op
WorkloadJitting  2: 16 op, 856616.79 ns, 53.5385 us/op

WorkloadPilot    1: 16 op, 223179.85 ns, 13.9487 us/op
WorkloadPilot    2: 32 op, 193276.67 ns, 6.0399 us/op
WorkloadPilot    3: 64 op, 701995.45 ns, 10.9687 us/op
WorkloadPilot    4: 128 op, 1366429.59 ns, 10.6752 us/op
WorkloadPilot    5: 256 op, 2589178.04 ns, 10.1140 us/op
WorkloadPilot    6: 512 op, 3978217.35 ns, 7.7700 us/op
WorkloadPilot    7: 1024 op, 9294055.14 ns, 9.0762 us/op
WorkloadPilot    8: 2048 op, 16777873.69 ns, 8.1923 us/op
WorkloadPilot    9: 4096 op, 39839791.87 ns, 9.7265 us/op
WorkloadPilot   10: 8192 op, 65162317.76 ns, 7.9544 us/op
WorkloadPilot   11: 16384 op, 134540254.97 ns, 8.2117 us/op
WorkloadPilot   12: 32768 op, 255427518.88 ns, 7.7950 us/op
WorkloadPilot   13: 65536 op, 477694231.20 ns, 7.2890 us/op
WorkloadPilot   14: 131072 op, 947962262.18 ns, 7.2324 us/op

OverheadWarmup   1: 131072 op, 241413.50 ns, 1.8418 ns/op
OverheadWarmup   2: 131072 op, 239590.14 ns, 1.8279 ns/op
OverheadWarmup   3: 131072 op, 349721.37 ns, 2.6682 ns/op
OverheadWarmup   4: 131072 op, 308878.00 ns, 2.3566 ns/op
OverheadWarmup   5: 131072 op, 285903.60 ns, 2.1813 ns/op
OverheadWarmup   6: 131072 op, 291373.70 ns, 2.2230 ns/op
OverheadWarmup   7: 131072 op, 250530.33 ns, 1.9114 ns/op

OverheadActual   1: 131072 op, 243601.54 ns, 1.8585 ns/op
OverheadActual   2: 131072 op, 236672.75 ns, 1.8057 ns/op
OverheadActual   3: 131072 op, 236672.75 ns, 1.8057 ns/op
OverheadActual   4: 131072 op, 239954.81 ns, 1.8307 ns/op
OverheadActual   5: 131072 op, 257459.11 ns, 1.9643 ns/op
OverheadActual   6: 131072 op, 279704.16 ns, 2.1340 ns/op
OverheadActual   7: 131072 op, 243236.87 ns, 1.8558 ns/op
OverheadActual   8: 131072 op, 284080.24 ns, 2.1674 ns/op
OverheadActual   9: 131072 op, 340604.55 ns, 2.5986 ns/op
OverheadActual  10: 131072 op, 258553.13 ns, 1.9726 ns/op
OverheadActual  11: 131072 op, 258917.80 ns, 1.9754 ns/op
OverheadActual  12: 131072 op, 302313.89 ns, 2.3065 ns/op
OverheadActual  13: 131072 op, 266940.61 ns, 2.0366 ns/op
OverheadActual  14: 131072 op, 248706.96 ns, 1.8975 ns/op
OverheadActual  15: 131072 op, 260376.50 ns, 1.9865 ns/op
OverheadActual  16: 131072 op, 237766.77 ns, 1.8140 ns/op
OverheadActual  17: 131072 op, 237766.77 ns, 1.8140 ns/op
OverheadActual  18: 131072 op, 240684.16 ns, 1.8363 ns/op
OverheadActual  19: 131072 op, 328935.01 ns, 2.5096 ns/op
OverheadActual  20: 131072 op, 336957.82 ns, 2.5708 ns/op

WorkloadWarmup   1: 131072 op, 1259355411.36 ns, 9.6081 us/op
WorkloadWarmup   2: 131072 op, 662820460.92 ns, 5.0569 us/op
WorkloadWarmup   3: 131072 op, 1850544985.51 ns, 14.1185 us/op
WorkloadWarmup   4: 131072 op, 698983619.98 ns, 5.3328 us/op
WorkloadWarmup   5: 131072 op, 630531952.10 ns, 4.8106 us/op
WorkloadWarmup   6: 131072 op, 641367479.85 ns, 4.8932 us/op
WorkloadWarmup   7: 131072 op, 3063381619.68 ns, 23.3717 us/op
WorkloadWarmup   8: 131072 op, 730045368.96 ns, 5.5698 us/op

// BeforeActualRun
WorkloadActual   1: 131072 op, 647723364.92 ns, 4.9417 us/op
WorkloadActual   2: 131072 op, 648069074.89 ns, 4.9444 us/op
WorkloadActual   3: 131072 op, 656615185.78 ns, 5.0096 us/op
WorkloadActual   4: 131072 op, 637212031.44 ns, 4.8615 us/op
WorkloadActual   5: 131072 op, 651044806.27 ns, 4.9671 us/op
WorkloadActual   6: 131072 op, 638354187.16 ns, 4.8703 us/op

OutOfMemoryException!
BenchmarkDotNet continues to run additional iterations until desired accuracy level is achieved. It's possible only if the benchmark method doesn't have any side-effects.
If your benchmark allocates memory and keeps it alive, you are creating a memory leak.
You should redesign your benchmark and remove the side-effects. You can use `OperationsPerInvoke`, `IterationSetup` and `IterationCleanup` to do that.

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at System.Collections.Generic.List`1.set_Capacity(Int32 value)
   at System.Collections.Generic.List`1.AddWithResize(T item)
   at ForVSForeachPerformance.ForVSForeach.TestForeachLoop() in C:\Users\arupade\source\repos\PerformanceAssignment\ForVSForeachPerformance\Program.cs:line 44
   at BenchmarkDotNet.Autogenerated.Runnable_1.WorkloadActionUnroll(Int64 invokeCount) in C:\Users\arupade\source\repos\PerformanceAssignment\ForVSForeachPerformance\bin\Release\netcoreapp2.2\a7e654da-43d3-48f7-88bb-7deb65b11bd5\a7e654da-43d3-48f7-88bb-7deb65b11bd5.notcs:line 1372
   at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data)
   at BenchmarkDotNet.Engines.EngineStage.RunIteration(IterationMode mode, IterationStage stage, Int32 index, Int64 invokeCount, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineActualStage.RunAuto(Int64 invokeCount, IterationMode iterationMode, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineActualStage.Run(Int64 invokeCount, IterationMode iterationMode, Boolean runAuto, Int32 unrollFactor, Boolean forceSpecific)
   at BenchmarkDotNet.Engines.Engine.Run()
   at BenchmarkDotNet.Autogenerated.Runnable_1.Run(IHost host, String benchmarkName) in C:\Users\arupade\source\repos\PerformanceAssignment\ForVSForeachPerformance\bin\Release\netcoreapp2.2\a7e654da-43d3-48f7-88bb-7deb65b11bd5\a7e654da-43d3-48f7-88bb-7deb65b11bd5.notcs:line 812
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in C:\Users\arupade\source\repos\PerformanceAssignment\ForVSForeachPerformance\bin\Release\netcoreapp2.2\a7e654da-43d3-48f7-88bb-7deb65b11bd5\a7e654da-43d3-48f7-88bb-7deb65b11bd5.notcs:line 49
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


Successfully reverted power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)
// ***** BenchmarkRunner: Finish  *****

// * Export *
  BenchmarkDotNet.Artifacts\results\ForVSForeachPerformance.ForVSForeach-report.csv
  BenchmarkDotNet.Artifacts\results\ForVSForeachPerformance.ForVSForeach-report-github.md
  BenchmarkDotNet.Artifacts\results\ForVSForeachPerformance.ForVSForeach-report.html

// * Detailed results *
ForVSForeach.TestForLoop: DefaultJob
Runtime = ; GC = 
There are not any results runs

ForVSForeach.TestForeachLoop: DefaultJob
Runtime = ; GC = 
There are not any results runs

// * Summary *

BenchmarkDotNet=v0.11.5, OS=Windows 10.0.17134.885 (1803/April2018Update/Redstone4)
Intel Core i7-6600U CPU 2.60GHz (Skylake), 1 CPU, 4 logical and 2 physical cores
Frequency=2742183 Hz, Resolution=364.6730 ns, Timer=TSC
.NET Core SDK=2.2.401
  [Host] : .NET Core 2.2.6 (CoreCLR 4.6.27817.03, CoreFX 4.6.27818.02), 64bit RyuJIT  [AttachedDebugger]


|          Method | Mean | Error |
|---------------- |-----:|------:|
|     TestForLoop |   NA |    NA |
| TestForeachLoop |   NA |    NA |

Benchmarks with issues:
  ForVSForeach.TestForLoop: DefaultJob
  ForVSForeach.TestForeachLoop: DefaultJob

// * Warnings *
Environment
  Summary -> Benchmark was executed with attached debugger
  Summary -> Detected error exit code from one of the benchmarks. It might be caused by following antivirus software:
        - McAfee Endpoint Security (C:\Program Files (x86)\McAfee\Endpoint Security\Threat Prevention\AMCFG.EXE)
        - Windows Defender (windowsdefender://)
Use InProcessToolchain to avoid new process creation.


// * Legends *
  Mean  : Arithmetic mean of all measurements
  Error : Half of 99.9% confidence interval
  1 ns  : 1 Nanosecond (0.000000001 sec)

// * Diagnostic Output - MemoryDiagnoser *


// ***** BenchmarkRunner: End *****
// ** Remained 0 benchmark(s) to run **
Run time: 00:00:35 (35.37 sec), executed benchmarks: 2

Global total time: 00:00:42 (42.89 sec), executed benchmarks: 2
// * Artifacts cleanup *
